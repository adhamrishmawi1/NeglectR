[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 NeglectR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). NeglectR: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {NeglectR: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"neglectr","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"created NeglectR package way practice group work git.","code":""},{"path":"/reference/data1.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataframe — data1","title":"Example dataframe — data1","text":"Example dataframe","code":""},{"path":"/reference/data1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataframe — data1","text":"","code":"data1"},{"path":"/reference/data1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataframe — data1","text":"object class data.frame 3 rows 4 columns.","code":""},{"path":"/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply alteration to dataframe — df_apply","title":"Apply alteration to dataframe — df_apply","text":"Apply alteration dataframe","code":""},{"path":"/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply alteration to dataframe — df_apply","text":"","code":"df_apply(.data, .fun, .filter, ...)"},{"path":"/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply alteration to dataframe — df_apply","text":".data dataframe alter. .fun function can applied column data frame return column data frame. .filter function can applied columns data frame returns. ... additional parameters passed function.","code":""},{"path":"/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply alteration to dataframe — df_apply","text":"altered dataframe.","code":""},{"path":"/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply alteration to dataframe — df_apply","text":"","code":"funct <- function(.int) {return(.int * 2)} filt <- function(c) {is.numeric(c)} df_apply(presidents, funct, filt) #>                   name born_in_michigan begin_year #> 1   Geert Egberts Boer            FALSE       3752 #> 2  Albertus John Rooks             TRUE       3800 #> 3     John J. Hiemenga            FALSE       3838 #> 4      Johannes Broene             TRUE       3850 #> 5      Rienk B. Kuiper            FALSE       3860 #> 6           Ralph Stob            FALSE       3866 #> 7       Henry Schultze            FALSE       3880 #> 8     William Spoelhof            FALSE       3902 #> 9   Anthony J. Diekema             TRUE       3952 #> 10     Gaylen J. Byker            FALSE       3990 #> 11   Michael K. Le Roy            FALSE       4024 #> 12       Wiebe K. Bore            FALSE       4044"},{"path":"/reference/presidents.html","id":null,"dir":"Reference","previous_headings":"","what":"An example data frame about Calvin University's presidents — presidents","title":"An example data frame about Calvin University's presidents — presidents","text":"example data frame Calvin University's presidents","code":""},{"path":"/reference/presidents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example data frame about Calvin University's presidents — presidents","text":"","code":"presidents"},{"path":"/reference/presidents.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example data frame about Calvin University's presidents — presidents","text":"object class data.frame 12 rows 3 columns.","code":""}]
